# 0 - случайный свободный порт; если не указать, то будет 8080 и возможны конфликты
server.port=0
# Список брокеров
spring.kafka.producer.bootstrap-servers=localhost:9092,localhost:9094
# Сериализация ключей (key) в сообщении (message) на стороне сервера
# Используем сериализатор стрингов
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Сериализатор для значений
# Используем json сериализатор, т.к. сообщения будут в JSON
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Ожидать или нет синхронизации (переход реплики в состояние INSYNC) от всех реплик (которые работают с конкретным топиком)
spring.kafka.producer.acks=all
# не дожидаться
spring.kafka.producer.acks=0
# дожидаться только от лидера
spring.kafka.producer.acks=1
# дожидаться от лидера и одной из реплик
spring.kafka.producer.acks=2

# максимальное кол-во попыток повторить операцию при возникновении retryable вида ошибки
spring.kafka.producer.retries=10

# интервал в миллисекундах между неудачными повторными попытками (100ms default)
spring.kafka.producer.properties.retry.backoff.ms=1000

# максимальный таймаут для ожидания доставки сообщения (120000ms default). Суммарно на все попытки.
# если время вышло, то TimeoutException
spring.kafka.producer.properties.delivery.timeout.ms=60000

# накапливать или нет сообщения перед тем, как пытаться их отправить одной пачкой (для увеличения производительности)
spring.kafka.producer.properties.linger.ms=0

# максимальное время ожидания ответа при отправке одного сообщения. После этого времени будет следующая попытка отправить ещё одно сообщение.
spring.kafka.producer.properties.request.timeout.ms=30000

# формула ожидания повторов
# delivery.timeout.ms >= linger.ms + request.timeout.ms
